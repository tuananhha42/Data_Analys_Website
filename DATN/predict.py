import streamlit as st
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, StandardScaler, Normalizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LinearRegression, LogisticRegression,Lasso, Ridge
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, accuracy_score, precision_score, recall_score, f1_score, classification_report
from sklearn.svm import SVC
import numpy as np
import time
from datetime import datetime
import json

st.markdown(
    """
    <style>
    .green-text {
        font-size: 20px;
        color: green;
    }
    </style>
    """,
    unsafe_allow_html=True
)
# H√†m x·ª≠ l√Ω gi√° tr·ªã khuy·∫øt
def handle_missing_values(df, method):
    if method == "Mean":
        df.fillna(df.mean(), inplace=True)
    elif method == "Median":
        df.fillna(df.median(), inplace=True)
    elif method == "Mode":
        df.fillna(df.mode().iloc[0], inplace=True)
    return df

# H√†m x·ª≠ l√Ω gi√° tr·ªã ngo·∫°i lai
def handle_outliers(df, column, min_value, max_value):
    df[column] = df[column].apply(lambda x: min_value if x < min_value else (max_value if x > max_value else x))
    return df

# Function to scale the data based on the selected method
def scale_data(X_train, X_test, scaling_method):
    if scaling_method == "MinMax":
        scaler = MinMaxScaler()
    elif scaling_method == "Standard":
        scaler = StandardScaler()
    elif scaling_method == "Norm":
        scaler = Normalizer()
    else:
        return X_train, X_test, None
    
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    # Reset index and reassign original index
    X_train_scaled = pd.DataFrame(X_train_scaled, index=X_train.index, columns=X_train.columns)
    X_test_scaled = pd.DataFrame(X_test_scaled, index=X_test.index, columns=X_test.columns)

    return X_train_scaled, X_test_scaled, scaler

# H√†m ƒë·ªÉ m√£ h√≥a d·ªØ li·ªáu d·∫°ng s·ªë th√†nh d·∫°ng nh·ªã ph√¢n (0 v√† 1) b·∫±ng ph∆∞∆°ng ph√°p One-Hot Encoding
def encode_categorical_data(df, columns):
    encoded_df = df
    for col in columns:
        encoded_df = pd.get_dummies(encoded_df, columns=[col], drop_first=False)
        # S·ª≠ d·ª•ng drop_first=True ƒë·ªÉ tr√°nh multicollinearity
    return encoded_df

# H√†m ƒë·ªÉ chuy·ªÉn DataFrame d·∫°ng One-Hot v·ªÅ d·∫°ng nh·ªã ph√¢n (0 v√† 1)
def convert_to_binary(df):
    binary_df = df
    binary_df = binary_df.replace(False, 0)
    binary_df[binary_df != 0] = 1
    return binary_df

def train_regression_model(selected_model, X_train, X_test, Y_train, Y_test):
    model = None
    if selected_model == "Linear Regression":
        model = LinearRegression()
    elif selected_model == "Decision Tree Regressor":
        model = DecisionTreeRegressor()
    elif selected_model == "Lasso":
        model = Lasso()
    elif selected_model == 'Ridge':
        model = Ridge()

    if model:
        # Hu·∫•n luy·ªán m√¥ h√¨nh
        model.fit(X_train, Y_train)

        # ƒê√°nh gi√° m√¥ h√¨nh
        Y_pred = model.predict(X_test)
        mse = mean_squared_error(Y_test, Y_pred)
        rmse = np.sqrt(mean_squared_error(Y_test, Y_pred))
        mae = mean_absolute_error(Y_test, Y_pred)
        r2 = r2_score(Y_test, Y_pred)

        # Tr·∫£ v·ªÅ c√°c th√¥ng s·ªë ƒë√°nh gi√°
        return model,Y_pred, {"MSE": mse, "RMSE": rmse, "MAE": mae, "R^2": r2}
    else:
        st.warning("Vui l√≤ng ch·ªçn m·ªôt m√¥ h√¨nh h·ªìi quy ƒë·ªÉ hu·∫•n luy·ªán v√† ƒë√°nh gi√°.")

def train_classification_model(selected_model, X_train, X_test, Y_train, Y_test):
    model = None
    if selected_model == "Logistic Regression":
        model = LogisticRegression()
    elif selected_model == "Decision Tree Classifier":
        model = DecisionTreeClassifier()
    elif selected_model == "Naive Bayes":
        model = GaussianNB()
    elif selected_model == "Support Vector Machine":
        model = SVC()
    if model:
        # Hu·∫•n luy·ªán m√¥ h√¨nh
        model.fit(X_train, Y_train)

        # ƒê√°nh gi√° m√¥ h√¨nh
        Y_pred = model.predict(X_test)
        accuracy = accuracy_score(Y_test, Y_pred)
        precision = precision_score(Y_test, Y_pred, average='weighted')
        recall = recall_score(Y_test, Y_pred, average='weighted')
        f1 = f1_score(Y_test, Y_pred, average='weighted')
        classification_rep = classification_report(Y_test, Y_pred)

        # Tr·∫£ v·ªÅ c√°c th√¥ng s·ªë ƒë√°nh gi√°
        return model,Y_pred, {"Accuracy": accuracy, "Precision": precision, "Recall": recall, "F1 Score": f1, "Classification Report": classification_rep}
    else:
        st.warning("Vui l√≤ng ch·ªçn m·ªôt m√¥ h√¨nh ph√¢n lo·∫°i ƒë·ªÉ hu·∫•n luy·ªán v√† ƒë√°nh gi√°.")


def preprocessing(df):
    if "df" not in st.session_state:
        # Upload d·ªØ li·ªáu v√† hi·ªÉn th·ªã DataFrame
        st.session_state.df = df  # Thay "data.csv" b·∫±ng t√™n file c·ªßa b·∫°n
    else:
        st.session_state.df = df
    st.write("DataFrame ban ƒë·∫ßu:")
    st.write(st.session_state.df)

    st.session_state.df_number_collect = st.session_state.df.select_dtypes(include=['number'])
    st.session_state.categorical = st.session_state.df.select_dtypes(include=['object'])
    st.sidebar.title('üñçX·ª≠ l√Ω d·ªØ li·ªáu')

    # # Expander cho x·ª≠ l√Ω gi√° tr·ªã khuy·∫øt
    # with st.sidebar.expander("X·ª≠ l√Ω gi√° tr·ªã khuy·∫øt"):
    #     st.markdown("*L∆∞u √Ω: Th·ª±c hi·ªán c√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu*")
    #     missing_handling = st.radio("Ph∆∞∆°ng ph√°p", ["None", "Mean", "Median", "Mode"], index=0)
    
    # if missing_handling != "None":
    #     st.session_state.missing_handling = missing_handling
    # # X·ª≠ l√Ω khi n√∫t "X·ª≠ l√Ω khuy·∫øt" ƒë∆∞·ª£c nh·∫•n
    # if "missing_handling" in st.session_state:
    #     if st.session_state.missing_handling != "None":
    #         st.session_state.df_number = handle_missing_values(st.session_state.df_number, st.session_state.missing_handling)
    #         st.write("DataFrame sau khi x·ª≠ l√Ω khuy·∫øt:")
    #         st.write(st.session_state.df_number)

    total1,total2,total3 = st.columns(3)
    # Expander cho x·ª≠ l√Ω gi√° tr·ªã khuy·∫øt
    with st.sidebar.expander("X·ª≠ l√Ω gi√° tr·ªã khuy·∫øt"):
        st.markdown("*L∆∞u √Ω: Th·ª±c hi·ªán c√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu*")
        st.session_state.missing_handling = st.selectbox("Ph∆∞∆°ng ph√°p", ["None", "Mean", "Median", "Mode"], index=0)
        if st.session_state.missing_handling != "None":
            if st.button("X·ª≠ l√Ω khuy·∫øt"):
                st.session_state.df_number_pre = handle_missing_values(st.session_state.df_number_collect, st.session_state.missing_handling)
            # if st.button("Ho√†n t√°c"):
            #     st.session_state.df_number_pre = st.session_state.df_number_collect
    with total1:
        if "df_number_pre" in st.session_state:
            st.write("üåôDataFrame sau khi x·ª≠ l√Ω khuy·∫øt:")
            st.write(st.session_state.df_number_pre)

    # Expander cho x·ª≠ l√Ω gi√° tr·ªã ngo·∫°i lai (t√πy ch·ªçn)
    with st.sidebar.expander("X·ª≠ l√Ω gi√° tr·ªã ngo·∫°i lai (t√πy ch·ªçn)"):
        st.markdown("*L∆∞u √Ω: Ch·ªçn c·ªôt v√† nh·∫≠p gi√° tr·ªã l·ªõn nh·∫•t v√† nh·ªè nh·∫•t*")
        numerical_columns = st.session_state.df_number_collect.select_dtypes(include=['number']).columns
        outlier_options = ["None"] + list(numerical_columns)
        selected_column_outlier = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ x·ª≠ l√Ω ngo·∫°i lai", options=outlier_options, index=0)
        if selected_column_outlier != "None":
            min_outlier = st.number_input("Gi√° tr·ªã nh·ªè nh·∫•t:", value=st.session_state.df_number_collect[selected_column_outlier].min(), step=0.01)
            max_outlier = st.number_input("Gi√° tr·ªã l·ªõn nh·∫•t:", value=st.session_state.df_number_collect[selected_column_outlier].max(), step=0.01)

            if isinstance(min_outlier, float) and isinstance(max_outlier, float):

                if st.button("Th·ª±c hi·ªán X·ª≠ l√Ω"):
                    if "df_number_pre" in st.session_state:
                        st.session_state.df_outliers_removed_temp = handle_outliers(st.session_state.df_number_pre, selected_column_outlier, min_outlier, max_outlier)
                    else:
                        st.session_state.df_outliers_removed_temp = handle_outliers(st.session_state.df_number_collect, selected_column_outlier, min_outlier, max_outlier)
                    # st.write("DataFrame sau khi x·ª≠ l√Ω ngo·∫°i lai:")
                    # st.write(st.session_state.df_outliers_removed_temp)

                # if st.button("Ho√†n t√°c"):
                #     if "df_number_pre" in st.session_state:
                #         st.session_state.df_outliers_removed_temp = st.session_state.df_number_pre
                #     else:
                #         st.session_state.df_outliers_removed_temp = st.session_state.df_number_collect
    with total2:
        # Hi·ªÉn th·ªã DataFrame sau khi x·ª≠ l√Ω
        if "df_outliers_removed_temp" in st.session_state:
            st.write("üì§DataFrame sau khi x·ª≠ l√Ω ngo·∫°i lai:")
            st.write(st.session_state.df_outliers_removed_temp)
        # Multiselect cho vi·ªác m√£ h√≥a d·ªØ li·ªáu d·∫°ng s·ªë

    with st.sidebar.expander("M√£ h√≥a d·ªØ li·ªáu d·∫°ng ch·ªØ"):
        st.markdown("*L∆∞u √Ω: Ch·ªçn c·ªôt ƒë·ªÉ m√£ h√≥a*")
        numerical_columns = st.session_state.categorical.columns
        columns_to_encode = st.multiselect("Ch·ªçn c·ªôt ƒë·ªÉ m√£ h√≥a", options=numerical_columns)
    
        if columns_to_encode and st.button("M√£ h√≥a"):
            st.session_state.categorical_encoded = encode_categorical_data(st.session_state.categorical, columns_to_encode)
            # st.write("DataFrame sau khi m√£ h√≥a:")
            # st.write(st.session_state.categorical_encoded)
        elif not columns_to_encode:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt ƒë·ªÉ m√£ h√≥a.")
    
        # if st.button("Ho√†n t√°c"):
        #     st.session_state.categorical_encoded = st.session_state.categorical

    with total3:
        # Hi·ªÉn th·ªã DataFrame sau khi m√£ h√≥a tr√™n m√†n h√¨nh ch√≠nh
        if "categorical_encoded" in st.session_state:
            st.write("üîÅDataFrame sau khi m√£ h√≥a:")
            st.session_state.categorical_encoded = convert_to_binary(st.session_state.categorical_encoded)
            st.write(st.session_state.categorical_encoded)
    

    # N√∫t ƒë·ªÉ n·ªëi hai b·∫£ng d·ªØ li·ªáu
    if st.sidebar.button("N·ªëi 2 lo·∫°i d·ªØ li·ªáu"):
        if "categorical_encoded" in st.session_state:
            if "df_outliers_removed_temp" in st.session_state:
                st.session_state.joined_df_3_fun = pd.concat([st.session_state.df_outliers_removed_temp, st.session_state.categorical_encoded], axis=1)
            elif "df_outliers_removed_temp" not in st.session_state and "df_number_pre" in st.session_state:
                st.session_state.joined_df_2_fun = pd.concat([st.session_state.df_number_pre, st.session_state.categorical_encoded], axis=1)
            elif "df_outliers_removed_temp" not in st.session_state and "df_number_pre" not in st.session_state:
                st.session_state.joined_df_2_fun = pd.concat([st.session_state.df_number_collect, st.session_state.categorical_encoded], axis=1)

        elif "categorical_encoded" not in st.session_state:
            if "df_outliers_removed_temp" in st.session_state:
                st.session_state.joined_df_3_fun = pd.concat([st.session_state.df_outliers_removed_temp, st.session_state.categorical], axis=1)
            elif "df_outliers_removed_temp" not in st.session_state and "df_number_pre" in st.session_state:
                st.session_state.joined_df_2_fun = pd.concat([st.session_state.df_number_pre, st.session_state.categorical], axis=1)
            elif "df_outliers_removed_temp" not in st.session_state and "df_number_pre" not in st.session_state:
                st.session_state.joined_df_2_fun = pd.concat([st.session_state.df_number_collect, st.session_state.categorical], axis=1)
     
    if "joined_df_3_fun" in st.session_state:
        st.write("DataFrame sau n·ªëi:")
        st.write(st.session_state.joined_df_3_fun)
    elif "joined_df_2_fun" in st.session_state:
        st.write("DataFrame sau n·ªëi:")
        st.write(st.session_state.joined_df_2_fun)
    

    #Expander cho vi·ªác ch·ªçn t·∫≠p X v√† Y
    with st.sidebar.expander("Ch·ªçn t·∫≠p X v√† Y"):
        if "df_outliers_removed_temp" in st.session_state and "categorical_encoded" in st.session_state and "joined_df_3_fun" in st.session_state:
            # C·∫£ df_outliers_removed_temp v√† categorical_encoded ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c t·∫°o
            st.session_state.joined_df = st.session_state.joined_df_3_fun
        elif "df_outliers_removed_temp" in st.session_state and "categorical_encoded" not in st.session_state and 'categorical' in st.session_state:
            # Ch·ªâ df_outliers_removed_temp ƒë∆∞·ª£c t·∫°o
            st.session_state.joined_df = pd.concat([st.session_state.df_outliers_removed_temp,st.session_state.categorical], axis=1)
        elif "categorical_encoded" in st.session_state and "df_outliers_removed_temp" not in st.session_state and "joined_df_2_fun" in st.session_state:
            # Ch·ªâ categorical_encoded ƒë∆∞·ª£c t·∫°o
            st.session_state.joined_df = st.session_state.joined_df_2_fun
        elif "df_number_pre" in st.session_state and  "df_outliers_removed_temp" not in st.session_state and "categorical_encoded" not in st.session_state and 'categorical' in st.session_state and "joined_df_2_fun" in st.session_state:
            # B·∫±ng d·ªØ li·ªáu g·ªëc n·∫øu ko c√≥ d·ªØ li·ªáu m·ªõi n√†o ƒë∆∞·ª£c t·∫°o
            st.session_state.joined_df = st.session_state.joined_df_2_fun
        elif "df_number_pre" not in st.session_state and "df" in st.session_state:
            st.session_state.joined_df = st.session_state.df
        elif "df_number_pre" in st.session_state and "categorical" not in st.session_state:
            st.session_state.joined_df = st.session_state.df_number_pre

        # st.write(st.session_state.joined_df)
        # Multiselect cho vi·ªác ch·ªçn bi·∫øn ƒë·ªôc l·∫≠p (X)
        st.markdown("*L∆∞u √Ω: Ch·ªçn c√°c bi·∫øn ƒë·ªôc l·∫≠p (X)*")
        selected_independent_variables = st.multiselect("Ch·ªçn bi·∫øn ƒë·ªôc l·∫≠p (X)", options=list(st.session_state.joined_df.columns))
        
        # Lo·∫°i b·ªè c√°c bi·∫øn ƒë√£ ch·ªçn trong X kh·ªèi danh s√°ch c√°c bi·∫øn ƒë·ªÉ ch·ªçn Y
        dependent_variable_options = [col for col in st.session_state.joined_df.columns if col not in selected_independent_variables]
        
        # Selectbox cho vi·ªác ch·ªçn bi·∫øn ph·ª• thu·ªôc (Y)
        st.markdown("*L∆∞u √Ω: Ch·ªçn bi·∫øn ph·ª• thu·ªôc (Y)*")
        selected_dependent_variable = st.selectbox("Ch·ªçn bi·∫øn ph·ª• thu·ªôc (Y)", options=["None"] + dependent_variable_options, index=0)

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ch·ªçn bi·∫øn ph·ª• thu·ªôc (Y) ch∆∞a
        is_variable_selected = False
        if selected_dependent_variable != "None":
            is_variable_selected = True

        # Chia t·∫≠p d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† t·∫≠p ki·ªÉm tra
        if is_variable_selected:
            if st.button("Chia t·∫≠p d·ªØ li·ªáu"):
                if selected_dependent_variable:
                    st.session_state.X = st.session_state.joined_df[selected_independent_variables]
                    st.session_state.Y = st.session_state.joined_df[selected_dependent_variable]

                    # Th·ª±c hi·ªán chia t·∫≠p d·ªØ li·ªáu
                    X_train, X_test, Y_train, Y_test = train_test_split(st.session_state.X, st.session_state.Y, test_size=0.2, random_state=42)

                    # L∆∞u tr·ªØ t·∫≠p d·ªØ li·ªáu ƒë√£ chia v√†o session state
                    st.session_state.X_train, st.session_state.X_test = X_train, X_test
                    st.session_state.Y_train, st.session_state.Y_test = Y_train, Y_test
    
    if "Y" and "X" in st.session_state:
        if "X_train" and "Y_train" in st.session_state:
            if "X_test" and "Y_test" in st.session_state:
                colX1,colX2,colX3 = st.columns(3)
                with colX1:
                    st.write("üìçT·∫≠p d·ªØ li·ªáu X:")
                    st.write(st.session_state.X)
                with colX2:
                    st.write("üìçT·∫≠p d·ªØ li·ªáu X_train:")
                    st.write(st.session_state.X_train)
                with colX3:
                    st.write("üìçT·∫≠p d·ªØ li·ªáu X_test:")
                    st.write(st.session_state.X_test)
                colY1,colY2,colY3 = st.columns(3)
                with colY1:
                    st.write("üìçT·∫≠p d·ªØ li·ªáu Y:")
                    st.write(st.session_state.Y)
                with colY2:
                    st.write("üìçT·∫≠p d·ªØ li·ªáu Y_train:")
                    st.write(st.session_state.Y_train)
                with colY3:
                    st.write("üìçT·∫≠p d·ªØ li·ªáu Y_test:")
                    st.write(st.session_state.Y_test)

    # # Hi·ªÉn th·ªã t·∫≠p d·ªØ li·ªáu ƒë√£ chia trong hai c·ªôt
    #     col1, col2 = st.columns([4,3])
    #     with col1:
    #         st.subheader("T·∫≠p d·ªØ li·ªáu X:")
    #         st.write(st.session_state.X)
    #     with col2:
    #         st.subheader("T·∫≠p d·ªØ li·ªáu Y:")
    #         st.write(st.session_state.Y)

    # if "X_train" and "Y_train" in st.session_state:
    # # Hi·ªÉn th·ªã t·∫≠p d·ªØ li·ªáu ƒë√£ chia trong hai c·ªôt
    #     col1,col2 = st.columns([4,3])
        
    #     with col1:
    #         st.subheader("T·∫≠p d·ªØ li·ªáu X_train:")
    #         st.write(st.session_state.X_train)
    #     with col2:
    #         st.subheader("T·∫≠p d·ªØ li·ªáu Y_train:")
    #         st.write(st.session_state.Y_train)
    
    # if "X_test" and "Y_test" in st.session_state:
    # # Hi·ªÉn th·ªã t·∫≠p d·ªØ li·ªáu ƒë√£ chia trong hai c·ªôt
    #     col1, col2 = st.columns([4,3])
    #     with col1:
    #         st.subheader("T·∫≠p d·ªØ li·ªáu X_test:")
    #         st.write(st.session_state.X_test)
    #     with col2:
    #         st.subheader("T·∫≠p d·ªØ li·ªáu Y_test:")
    #         st.write(st.session_state.Y_test)

        # Chu·∫©n h√≥a data
    with st.sidebar.expander("Chu·∫©n h√≥a d·ªØ li·ªáu"):
        scaling_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p", ["None", "MinMax", "Standard", "Norm"], index=0)
        if scaling_method != "None":
            if st.button("Chu·∫©n h√≥a"):
                if "X_train" in st.session_state and "X_test" in st.session_state:
                    st.session_state.X_train_scaled, st.session_state.X_test_scaled,st.session_state.scaler  = scale_data(st.session_state.X_train, st.session_state.X_test, scaling_method)
                    st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a.")

    # Hi·ªÉn th·ªã ph·∫ßn chu·∫©n h√≥a
                    
    if "X_train_scaled" in st.session_state and "X_test_scaled" in st.session_state:
        col_X_train, col_X_test = st.columns(2)
        with col_X_train:
            st.write("üìçT·∫≠p d·ªØ li·ªáu X_train sau khi chu·∫©n h√≥a:")
            st.write(st.session_state.X_train_scaled)
        with col_X_test:
            st.write("üìçT·∫≠p d·ªØ li·ªáu X_test sau khi chu·∫©n h√≥a:")
            st.write(st.session_state.X_test_scaled)
            # st.write(type(st.session_state.X_test_scaled))


    st.sidebar.title('üí°Hu·∫•n luy·ªán v√† ƒë√°nh gi√°')

    with st.sidebar.expander("Ch·ªçn m√¥ h√¨nh"):
        regression_models = ["None", "Linear Regression", "Decision Tree Regressor", "Lasso", "Ridge"]
        classification_models = ["None", "Logistic Regression", "Decision Tree Classifier", "Support Vector Machine", "Naive Bayes"]
        st.session_state.selected_regression_model = st.selectbox("Ch·ªçn m√¥ h√¨nh h·ªìi quy:", options=regression_models, index=0)
        st.session_state.selected_classification_model = st.selectbox("Ch·ªçn m√¥ h√¨nh ph√¢n lo·∫°i:", options=classification_models, index=0)

        if st.session_state.selected_regression_model != "None" and st.session_state.selected_classification_model != "None":
            st.warning("Vui l√≤ng ch·ªâ ch·ªçn m·ªôt m√¥ h√¨nh h·ªìi quy ho·∫∑c m·ªôt m√¥ h√¨nh ph√¢n lo·∫°i.")
        else:
            if st.session_state.selected_regression_model != "None":
                st.write("M√¥ h√¨nh h·ªìi quy ƒë∆∞·ª£c ch·ªçn:", st.session_state.selected_regression_model)
                st.session_state.model,st.session_state.Y_pred, st.session_state.regression_metrics = train_regression_model(st.session_state.selected_regression_model, st.session_state.X_train_scaled, st.session_state.X_test_scaled, st.session_state.Y_train, st.session_state.Y_test)
                if st.session_state.regression_metrics is not None:
                    st.session_state.regression_metrics["None"] = None  # Th√™m option m·∫∑c ƒë·ªãnh "None"
                    st.session_state.selected_metric = st.selectbox("Ch·ªçn th√¥ng s·ªë ƒë√°nh gi√°:", options=list(st.session_state.regression_metrics.keys()))
                    if st.session_state.selected_metric != "None":
                        if st.button("Hu·∫•n luy·ªán"):
                            progress_bar = st.progress(0)
                            # st.write(f"Th√¥ng s·ªë ƒë√°nh gi√° '{st.session_state.selected_metric}': {st.session_state.classification_metrics[st.session_state.selected_metric]}")
                            for percent_complete in range(100):
                                time.sleep(0.005)  # Gi·∫£m th·ªùi gian sleep ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
                                progress_bar.bar_color = 'green'
                                progress_bar.progress(percent_complete + 1,text='ƒêang hu·∫•n luy·ªán d·ªØ li·ªáu')
                                

                            # st.write(f"Th√¥ng s·ªë ƒë√°nh gi√° '{selected_metric}': {st.session_state.regression_metrics[selected_metric]}")
                            st.session_state.rate = st.session_state.regression_metrics[st.session_state.selected_metric]
                            st.success("ƒê√£ hu·∫•n luy·ªán th√†nh c√¥ng.")

            elif st.session_state.selected_classification_model != "None":
                st.write("M√¥ h√¨nh ph√¢n lo·∫°i ƒë∆∞·ª£c ch·ªçn:", st.session_state.selected_classification_model)
                st.session_state.model,st.session_state.Y_pred, st.session_state.classification_metrics = train_classification_model(st.session_state.selected_classification_model, st.session_state.X_train_scaled, st.session_state.X_test_scaled, st.session_state.Y_train, st.session_state.Y_test)
                if st.session_state.classification_metrics is not None:
                    st.session_state.classification_metrics["None"] = None  # Th√™m option m·∫∑c ƒë·ªãnh "None"
                    st.session_state.selected_metric = st.selectbox("Ch·ªçn th√¥ng s·ªë ƒë√°nh gi√°:", options=list(st.session_state.classification_metrics.keys()))
                    if st.session_state.selected_metric != "None":
                        if st.button("Hu·∫•n luy·ªán"):
                            # Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
                            progress_bar = st.progress(0)
                            # st.write(f"Th√¥ng s·ªë ƒë√°nh gi√° '{st.session_state.selected_metric}': {st.session_state.classification_metrics[st.session_state.selected_metric]}")
                            for percent_complete in range(100):
                                time.sleep(0.005)  # Gi·∫£m th·ªùi gian sleep ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
                                progress_bar.bar_color = 'green'
                                progress_bar.progress(percent_complete + 1,text='ƒêang hu·∫•n luy·ªán d·ªØ li·ªáu')

                            st.session_state.rate = st.session_state.classification_metrics[st.session_state.selected_metric]
                            st.success("ƒê√£ hu·∫•n luy·ªán th√†nh c√¥ng.")
                            
            else:
                st.warning("Vui l√≤ng ch·ªçn m·ªôt m√¥ h√¨nh ƒë·ªÉ ƒë√°nh gi√°.")
    if "rate" in st.session_state:
        st.subheader(f'Th√¥ng s·ªë ƒë√°nh gi√° c·ªßa {st.session_state.selected_metric}: {st.session_state.rate}')
        # st.write(st.session_state.rate)
    
    # if "Y_pred" and 'model' in st.session_state:
    #     st.write('Y_PRED')
    #     st.write(st.session_state.Y_pred)
    #     st.write(st.session_state.model)

    st.sidebar.title('üìàD·ª± b√°o d·ªØ li·ªáu')
    #D·ª± b√°o m√¥ h√¨nh
    with st.sidebar.expander("D·ª± ƒëo√°n v·ªõi d·ªØ li·ªáu m·ªõi"):
        # Ki·ªÉm tra xem ƒë√£ c√≥ model v√† scaler trong session state ch∆∞a
        if "model" not in st.session_state or "scaler" not in st.session_state:
            st.warning("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi th·ª±c hi·ªán d·ª± ƒëo√°n v·ªõi d·ªØ li·ªáu m·ªõi.")
        else:
            # L·∫•y danh s√°ch t√™n c·ªôt c·ªßa d·ªØ li·ªáu X
            column_names = st.session_state.X_train.columns.tolist()
            
            # T·∫°o danh s√°ch c√°c √¥ nh·∫≠p li·ªáu cho d·ªØ li·ªáu m·ªõi
            st.session_state.new_data = []
            
            for column_name in column_names:
                st.session_state.new_data.append(st.number_input(f"Nh·∫≠p d·ªØ li·ªáu cho c·ªôt '{column_name}':", value=0.0))

            

            # Ki·ªÉm tra xem t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß ch∆∞a
            all_fields_filled = all(st.session_state.new_data)
            
            # N·∫øu t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß, hi·ªÉn th·ªã n√∫t "D·ª± b√°o"
            if all_fields_filled:
                if st.button("D·ª± b√°o"):
                    if "predictions" not in st.session_state:
                        st.session_state.predictions = []
                    st.session_state.predict_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                    # Chuy·ªÉn d·ªØ li·ªáu nh·∫≠p v√†o th√†nh m·ªôt h√†ng d·ªØ li·ªáu m·ªõi
                    st.session_state.new_data_array = np.array(st.session_state.new_data).reshape(1, -1)
                    
                    # Chu·∫©n h√≥a d·ªØ li·ªáu m·ªõi b·∫±ng scaler
                    st.session_state.scaled_new_data = st.session_state.scaler.transform(st.session_state.new_data_array)

                    # Chuy·ªÉn ma tr·∫≠n th√†nh DataFrame
                    st.session_state.df_scaled_new_data = pd.DataFrame(data=st.session_state.scaled_new_data, columns=column_names)

                    # D·ª± ƒëo√°n v·ªõi d·ªØ li·ªáu m·ªõi b·∫±ng model
                    st.session_state.prediction = st.session_state.model.predict(st.session_state.df_scaled_new_data)
                    
                    # st.write(f"Nh·∫≠p v√†o: {st.session_state.new_data}")

                    # st.write(f"Tr∆∞·ªõc scaler: {st.session_state.new_data_array}")

                    # st.write(f"sau scaler: {st.session_state.scaled_new_data}")
                    # st.write(st.session_state.df_scaled_new_data)
                    # st.write(f'Type df:{type(st.session_state.df_scaled_new_data)}')
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
                    st.write(f"K·∫øt qu·∫£ d·ª± ƒëo√°n: {st.session_state.prediction[0]}")

                    st.session_state.prediction_value = str(st.session_state.prediction[0])
                    st.session_state.data_dict = {"time": st.session_state.predict_time, "value": {"D·ªØ li·ªáu nh·∫≠p v√†o":st.session_state.new_data,'D·ª± B√°o':st.session_state.prediction_value},}

                    # st.session_state.text_value = (f'D·ªØ li·ªáu nh·∫≠p v√†o:{st.session_state.new_data}, d·ªØ li·ªáu d·ª± b√°o :{st.session_state.prediction[0]}')
                    # st.session_state.data_dict = {"time": st.session_state.predict_time, "value":  st.session_state.text_value}
                    st.session_state.predictions.append(st.session_state.data_dict)
            else:
                st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu cho t·∫•t c·∫£ c√°c c·ªôt.")

    if "new_data" and "new_data_array"  and "prediction" and 'scaled_new_data' and 'df_scaled_new_data' in st.session_state:
        progress_bar = st.progress(0)
        # st.write(f"Th√¥ng s·ªë ƒë√°nh gi√° '{st.session_state.selected_metric}': {st.session_state.classification_metrics[st.session_state.selected_metric]}")
        for percent_complete in range(100):
            time.sleep(0.005)  # Gi·∫£m th·ªùi gian sleep ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
            progress_bar.bar_color = 'green'
            progress_bar.progress(percent_complete + 1,text='ƒêang d·ª± ƒëo√°n d·ªØ li·ªáu')

        st.subheader(f"Nh·∫≠p v√†o: {st.session_state.new_data}")
        st.subheader(f"Tr∆∞·ªõc scaler: {st.session_state.new_data_array}")
        st.subheader(f"Sau scaler: {st.session_state.scaled_new_data}")
        st.write(st.session_state.df_scaled_new_data)
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
        st.subheader(f"K·∫øt qu·∫£ d·ª± ƒëo√°n: {st.session_state.prediction[0]}")
        # st.write(f"Model sau d·ª± ƒëo√°n: {st.session_state.model}")

# H√†m l∆∞u bi·∫øn JSON v√†o file
def save_json_to_file(data, file_path):
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

def history():
    if "predictions" not in st.session_state:
        st.subheader("Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o")
    else:
        st.subheader("L·ªãch s·ª≠ d·ª± b√°o:")
        st.write(st.session_state.predictions)
        # N√∫t ƒë·ªÉ l∆∞u bi·∫øn JSON
        if st.button("L∆∞u d·ªØ li·ªáu"):
            save_json_to_file(st.session_state.predictions, "predictions.json")
            st.success("Bi·∫øn JSON ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o file 'predictions.json'.")
        for prediction in st.session_state.predictions:
            st.write(f"- {prediction['time']}: {prediction['value']}")

        
        